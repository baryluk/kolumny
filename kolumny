#!/usr/bin/python

usage = """kolumny - multifile column oriented line processing engine
Author: Witold Baryluk, 2010, Copyright, BSD license
Version: 1.0, 2010-05-13

Usage: kolumny [options]... inputspec...

options:
	--begin python-code
	       : execute Python code after startup
	--end python-code
	       : execute Python code at shutdown

inputspec: one of:
	filespec [skip N] [using USINGSPEC]
	":expression"

filespec: one of:
	"filepath"       : named file
	"-"              : standard input
	"<command"       : spawn /bin/sh with given command and read stdout
	""               : file from previous filespec

skip N | s N:
	N - positive integer number of first lines to skip from input

using USINGSPEC | u USINGSPEC:
	USINGSPEC of the form:
		u1[,u2][,u3]...
	
	Each u of the form:
		[[~]varname:=]columnsspec
	
	~       : do not print, only store value in variable varname
	          for further reference.
	varname : unique variable name to store scalar or vector value.
	          Data will be converted to floats.
	columnspec: One of:
		N       : positive integer indicating single column number
		          counting from 1
		L...R   : pair of positive integers indicating vector of
		          columns. L marks first column, R last, inclusive.
		          Note that when using later varname for referencing
		          vector's elements L column will be at index 0,
		          L+1 at index 1, etc (just like Python's arrays).
		(pexpr) : where pexpr is any Python expression. column(x)
		          and valid(x) functions can be used to retrive
		          x'th column (counting from 1), or check if it
		          is valid column number and value there is float.
		          x needs to be expression evaluating to positive
		          integer.

:expression of the form:
	:[~][varname:=]pexpr
	
	Where:
		~         : do not print pexpr value as a column
		varname   : uniqe variable name to store value of pexpr.
		            varname should be valid Python identifier.
		pexpr     : any Python expression to evaluate.

Prefix inputspec with "#" to disable processing of file or expression.
"""

import sys
from math import *

import subprocess
#import shlex

vec_sum = lambda a, b: map(lambda (x,y): x + y, zip(a, b))

def check(cond):
	assert cond

def eq(x, y):
	# TODO(baryluk): Make it better.
	return abs(x - y) / (abs(x) + abs(y)) < 1.0e-14

def avg(l):
	# TODO(baryluk): This is not the best method.
	return sum(l) / len(l)

def stddev(l):
	m = avg(l)
	# TODO(baryluk): This is not the best method.
	s = sum(map(lambda x: (x - m)**2, l)) / (len(l)-1)
	return sqrt(s)

from functools import reduce

files = []
variables = {}
functions = {}

actions = []

arguments = sys.argv
argument_i = 1

local_variables = {}

my_name = arguments[0]

number_of_files = 0

import random

if len(arguments) == 1:
	print usage
	raise NameError("invalid arguments")

prev_filename = None
while argument_i < len(arguments):
	e = arguments[argument_i]
	argument_i += 1
	action = {}
	commented = False
	if len(e) >= 1 and e[0] == '#':
		commented = True
		e = e[1:]
	action["commented"] = commented

	if e == "--begin":
		e = arguments[argument_i]
		argument_i += 1
		# eval(e, globals())
		exec e in globals(), local_variables
		continue
	elif e == "--import":
		e = arguments[argument_i]
		argument_i += 1
		local_variables[e] = __import__(e)
		continue
	elif len(e) >= 1 and e[0] == ':':
		action["type"] = "expression"
		e = e[1:]
		not_print = False
		if e[0] == "~":
			not_print = True
			e = e[1:]
		action["not_print"] = not_print
		if len(e) == 0:
			raise NameError("at most one 'using' allowed")
		action["expression"] = e
		e = e.split(":=")
#		if not_print and len(e) == 1:
#			raise NameError("What is a point calculating something without printing or assigning? '%s'" % (e))
#			# There is a point. It can have side effects, like accumulating something, or assert check.
		action["expression_variable"] = None
		if len(e) == 1:
			action["expression_expr"] = e[0]
		elif len(e) == 2:
			action["expression_variable"] = e[0]
			action["expression_expr"] = e[1]
		else:
			raise NameError("at most one ':=' allowed in expression. '%s'" % (e))
		action["expression_p"] = e
		if (argument_i < len(arguments)) and (arguments[argument_i] == "title"):
			argument_i += 1
			action["title"] = arguments[argument_i]
			argument_i += 1
	else:
		action["type"] = "file"
		if e == "":
			e = prev_filename
		prev_filename = e
		if e == None:
			raise NameError("empty input file name used, and no previous real file name define")
		if e == "":
			raise NameError("empty input file name used")
		# TODO(baryluk): Still need to define what happens when we have commented previous file.
		action["file_name"] = e
		number_of_files += 1
		plik = None
		if e[0] == '<':
			action["file_type"] = "pipe"
			e = e[1:]
			action["pipe_command"] = e
			if not commented:
				try:
					p1 = subprocess.Popen(e, shell=True, close_fds=True, stdout=subprocess.PIPE)
					#plik = popen(e)
					plik = p1.stdout
				except OSError, err:
					print >>sys.stderr, "Execution failed:", err
					raise
		else:
			if e == "-":
				action["file_type"] = "stdin"
				if not commented:
					# TODO(baryluk): support multiple usage of "-", and ""
					plik = sys.stdin
			else:
				action["file_type"] = "file"
				if e == "":
					raise NameError("file name \"\" (previously used filename) not supported")
				if not commented:
					plik = file(e)
		action["file"] = plik
		have_using = False
		using = None
		using2 = None
		have_skip = False
		have_title = False
		skip = None
		used = None
		while argument_i < len(arguments):
			next = arguments[argument_i]
			if next == "u" or next == "using":
				argument_i += 1
				if have_using:
					raise NameError("at most one 'using' allowed")
				have_using = True
				using = arguments[argument_i]
				argument_i += 1
				if len(using) == 0:
					raise NameError("empty using not allowed")
				using = using.split(",")
				used = []
				for u in using:
					if len(u) == 0:
						raise NameError("empty specifier not allowed")
					u = u.split(":=")
					if len(u) > 2:
						raise NameError("at most one ':=' allowed in each specifier")
					not_print = False
					var = None
					columns_spec = ""
					if len(u) == 2:
						var = u[0]
						if len(var) == 0:
							raise NameError("variable name before ':=' needed")
						if var[0] == "~":
							not_print = True
							var = var[1:]
						if len(var) == 0:
							raise NameError("variable name before ':=' needed")
						if var in variables:
							raise NameError("variable name '%s' already defined in some previous using" % (var))
						columns_spec = u[1]
					else:
						columns_spec = u[0]
					if len(columns_spec) == 0:
						raise NameError("columns spec needed")
					typ = None
					cc = None
					if columns_spec[0] == "(":
						if columns_spec[-1] != ")":
							raise NameError("opening bracket present, but closing missing")
						typ = "python-expression"
						cc = columns_spec
					else:
						columns_spec = columns_spec.split("...")
						if len(columns_spec) == 0:
							raise NameError("columns spec needed")
						if len(columns_spec) == 1:
							c = columns_spec[0]
							c = int(c)
							if c <= 0:
								raise NameError("positive column number needed currently")
							cc = c
							typ = "scalar"
						elif len(columns_spec) == 2:
							c_left, c_right = columns_spec
							c_left = int(c_left)
							# TODO(baryluk): support 'length' as c_right
							c_right = int(c_right)
							# if c_left > c_right:
							if c_right >= 1 and c_left > c_right:
								raise NameError("error in columns spec, first column cant be after last column used")
							cc = (c_left, c_right)
							typ = "vector"
						else:
							raise NameError("only zero or one '...' in columns spec allowed")
					variables[var] = {"file": plik, "type": typ, "column": cc}
					used.append({"variable": var, "not_print": not_print, "type": typ, "columns": cc})
			elif next == "t" or next == "title":
				argument_i += 1
				if have_title:
					raise NameError("at most one 'title' allowed")
				have_title = True
				title = arguments[argument_i]
				argument_i += 1
			elif next == "s" or next == "skip":
				argument_i += 1
				if have_skip:
					raise NameError("at most one 'skip' allowed")
				have_skip = True
				skip = arguments[argument_i]
				argument_i += 1
				skip = int(skip)
				# perform actuall skiping
				if skip > 0:
					if not commented:
						i = 0
						while i < skip:
							plik.readline()
							i += 1
				else:
					raise NameError("positive skip needed")
					# TODO(baryluk): for negative skip, we skip last 'skip' lines
					# we can't generally scan file twice (i.e. stdin), so we can't know how many lines there is
					# so we need to remember skip+1 lines in the memory
			#elif next == "F" or next == "field_separator":
			#elif next == "scanf":
			#
			else:
				break
		action["using"] = using
		action["used"] = used
		action["skip"] = skip
		if have_title:
			action["title"] = title
		action["processed_lines"] = 0
		if skip:
			action["current_line_number"] = skip
		else:
			action["current_line_number"] = 0
	actions.append(action)

def go():
	cols = {}
	current_variables = {}
	line_number = 0

	while True:
		row = []
		line_number += 1
		current_variables = {}
		try:
			# first we will read columns which need to be stored in some variable
			for a in actions:
				if a["commented"]:
					continue
				if a["type"] == "file":
					try:
						l = a["file"].next()
						a["current_line_number"] += 1
						l = l.strip()
						l = l.split()
						a["current_line_array"] = l
						if a["using"]:
							for u in a["used"]:
								var = u["variable"]
								if var:
									if var in current_variables:
										raise NameError("already assigned variable")
									c = u["columns"]
									if u["type"] == "scalar":
										v = float(l[c-1])
										current_variables[var] = v
									elif u["type"] == "vector":
										c_left, c_right = c
										if c_right < 0:
											c_right = len(l) + c_right
										v = map(float, l[c_left-1 : c_right + 1])
										current_variables[var] = v
									elif u["type"] == "python-expression":
										def is_valid_float(x):
											try:
												if i < len(l):
													p = float(l[x-1])
													return True
												else:
													return False
											except:
												return False
										def column_function(x):
											if x == 0:
												return line_number
											else:
												if x > len(l):
													raise NameError("trying to access invalid column number %d in file '%s' line %d, only %d columns available" % (x, a["file_name"], a["current_line_number"], len(l)))
												return float(l[x-1])
										available_locals = {
											"column": column_function,
											"valid": is_valid_float,
										}
										local_variables.update(available_locals)
										try:
											v = eval(c, globals(), local_variables)
											current_variables[var] = v
										except:
											print >> sys.stderr, "%s: output line %d: error procesing file '%s' when evaluating python-expression '%s' in using in phase1" % (my_name, line_number, a["file_name"], c)
											raise
									else:
										raise NameError("only scalar, vector or python-expression supported in using")
								else:
									pass
					except IndexError:
						print >> sys.stderr, "%s: output line %d: Not existing column in file '%s' line %d in phase1" % (my_name, line_number, a["file_name"], a["current_line_number"])
						raise
					except StopIteration:
						print >> sys.stderr, "%s: output line %d: End of file '%s' line %d in phase1" % (my_name, line_number, a["file_name"], a["current_line_number"])
						# end of file
						raise
					except:
						print >> sys.stderr, "%s: output line %d: Error when procesing file '%s' line %d in phase1" % (my_name, line_number, a["file_name"], a["current_line_number"])
						raise
				elif a["type"] == "expression":
					a["expression_done"] = False
					a["expression_calculated"] = False
					a["expression_value"] = None
					a["expression_position"] = None
		except StopIteration:
			break
		except IndexError:
			break
		
		last_processed_u = None
		
		action_pass = 0
		progress = True
		need_more = True
		need_expr = None
		try:
			while progress and need_more:
				progress = False
				need_more = False
				need_expr = None
				action_pass += 1
				for a in actions:
					if a["commented"]:
						continue
					# second we will read columns which need to be printed
					if a["type"] == "file":
						if action_pass > 1:
							continue
						try:
							l = a["current_line_array"]
							if a["using"]:
								for u in a["used"]:
									if u["not_print"]:
										continue
									else:
										# TODO(baryluk): If it was stored in variable, just use variable, and not parse again
										c = u["columns"]
										if u["type"] == "scalar":
											v = float(l[c-1])
											row.append(v)
										elif u["type"] == "vector":
											c_left, c_right = c
											if c_right < 0:
												c_right = len(l) + c_right
											for ci in range(c_left, c_right+1):
												vi = float(l[ci-1])
												row.append(vi)
										elif u["type"] == "python-expression":
											def is_valid_float(x):
												try:
													if i < len(l):
														p = float(l[x-1])
														return True
													else:
														return False
												except:
													return False
											def column_function(x):
												if x == 0:
													return line_number
												else:
													if x > len(l):
														raise NameError("trying to access invalid column number %d in file '%s' line %d, only %d columns available" % (x, a["file_name"], a["current_line_number"], len(l)))
													return float(l[x-1])
											available_locals = {
												"column": column_function,
												"valid": is_valid_float,
											}
											local_variables.update(available_locals)
											try:
												v = eval(c, globals(), local_variables)
												row.append(v)
											except:
												print >> sys.stderr, "%s: output line %d: error procesing file '%s' when evaluating python-expression '%s' in using in phase2" % (my_name, line_number, a["file_name"], c)
												raise
										else:
											raise NameError("only scalar, vector or python-expression supported in using")
							else:
								for v in l:
									row.append(v)
						except:
							print >> sys.stderr, "%s: Error when procesing file '%s' line %d in phase2" % (my_name, a["file_name"], a["current_line_number"])
							print >> sys.stderr, "%s: Used using %s" % (my_name, a["used"])
							raise
					elif a["type"] == "expression":
						if a["expression_done"]:
							continue
						last_processed_u = (a["expression_expr"],)
						ec = a["expression_calculated"]
						if not ec:
							expr = a["expression_expr"]
							try:
								# Perform merging of local_variables and current_variables
								# TODO(baryluk): get rid of current_variables entrirely somehow. Detect collisions
								used_variables = local_variables.copy()
								used_variables.update(current_variables)
								v = eval(expr, globals(), used_variables)
							except NameError as e:
								# print >> sys.stderr, "Error evaling, error was NameError:", e
								need_more = True
								need_expr = expr
								continue
							except ValueError as e:
								# print >> sys.stderr, "Error evaling, error was ValueError:", e
								v = float("nan")
							var = a["expression_variable"]
							if var:
								if var in current_variables:
									print >> sys.stderr, "already assigned variable '%s'" % (var)
									raise NameError("already assigned")
								else:
									current_variables[var] = v
							a["expression_value"] = v
							ec = True
							a["expression_calculated"] = ec
						else:
							v = a["expression_value"]
						if ec and not a["not_print"] and not need_more:
							row.append(v)
							a["expression_done"] = True
							a["expression_position"] = None
						progress = True
					else:
						raise NameError("only files and :expressions allowed")
		except IndexError:
			break
		except:
			print >> sys.stderr, "Exception occured when processing output line %d at phase2, pass number %d: '%s'" % (line_number, action_pass, last_processed_u)
			raise
		
		if need_more and not progress:
			print >> sys.stderr, "Unresolved dependency in expression '%s'" % (need_expr)
			raise NameError("unresolved dependencies in variable or unknown function called")
		
		# emit row with values to be printed
		yield row
		
		# in case of no input files and just python-expressions
		# do not loop, and just print single row.
		if number_of_files == 0:
			return

# create iterator
kk = go()

# traverse iterator
for row in kk:
	for c in row:
		print c,
	print
